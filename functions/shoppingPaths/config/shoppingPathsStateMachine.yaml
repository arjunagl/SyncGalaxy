AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  Post:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SyncGalaxy-fnShoppingPaths
      Handler: shoppingPathsHandler.getShoppingPaths
      Runtime: nodejs6.10
      Policies: [AmazonDynamoDBReadOnlyAccess, AmazonS3ReadOnlyAccess]
      Environment:
        Variables: 
          S3_BUCKET: SyncGalaxy-ShoppingPaths-bucket
          ShoppingPathsTable: SyncGalaxy-ShoppingPaths-tblShoppingPaths
      # Events:
      #   GetShoppingPaths:
      #     Type: Api
      #     Properties:
      #       Path: /SyncGalaxy/ShoppingPaths
      #       Method: post      
  Options:
    Type: AWS::Serverless::Function
    Properties:                     
      FunctionName: SyncGalaxy-fnShoppingPaths-Options
      Handler: shoppingPathsHandler.getOptions
      Runtime: nodejs6.10
      Events:
        GetOptions:
          Type: Api
          Properties:
            Path: /SyncGalaxy/ShoppingPaths
            Method: options                           
  ShoppingPathsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: SyncGalaxy-ShoppingPaths-tblShoppingPaths
      AttributeDefinitions: 
        - AttributeName: Id
          AttributeType: S   
      KeySchema: 
        - AttributeName: Id
          KeyType: HASH   
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5       
      StreamSpecification:
        StreamViewType: KEYS_ONLY                
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  APIGatewayExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StateExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                  - "lambda:InvokeFunction"
                Resource: "*"                
  UpdateShoppingPathStepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "State machine to update the shopping path",
              "StartAt": "UpdatePath",
              "States": {
                "UpdatePath": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ Post, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  ShoppingPathsRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "SyncGalaxy-ShoppingPaths"  
  ShoppingPathResource:
    Type: "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId: 
        Ref: "ShoppingPathsRestApi"
      ParentId: 
        Fn::GetAtt: 
          - "ShoppingPathsRestApi"
          - "RootResourceId"
      PathPart: "ShoppingPaths"    
  GetShoppingPaths: 
    Type: "AWS::ApiGateway::Method"
    Properties: 
      AuthorizationType: "NONE"
      OperationName: "GetShoppingPaths"
      RestApiId: !Ref "ShoppingPathsRestApi"
      ResourceId: !Ref "ShoppingPathResource"
      HttpMethod: "POST"
      Integration: 
        Credentials: !GetAtt [ APIGatewayExecutionRole, Arn ]
        IntegrationHttpMethod: POST
        Type: "AWS"   
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:states:action/StartExecution'
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: !Sub |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "stateMachineArn": "${UpdateShoppingPathStepFunction}"
            }
  OptionsMethod:
    DependsOn: "Options"
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "None"
      OperationName: "OPTIONS"
      RestApiId: !Ref "ShoppingPathsRestApi"
      ResourceId: !Ref "ShoppingPathResource"
      HttpMethod: "Options"
      Integration: 
        Credentials: !GetAtt [ APIGatewayExecutionRole, Arn ]
        IntegrationHttpMethod: GET
        Type: "AWS_PROXY"
        Uri:  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Options.Arn}/invocations
  Deployment: 
    DependsOn: "GetShoppingPaths"
    Type: "AWS::ApiGateway::Deployment"
    Properties: 
      RestApiId: !Ref "ShoppingPathsRestApi"
      Description: "Dev deployment"
      StageName: "DevStage"            
  